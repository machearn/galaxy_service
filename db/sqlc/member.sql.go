// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: member.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  username, fullname, email, plan, created_at, expired_at, auto_renew
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, fullname, email, plan, created_at, expired_at, auto_renew
`

type CreateMemberParams struct {
	Username  string    `json:"username"`
	Fullname  string    `json:"fullname"`
	Email     string    `json:"email"`
	Plan      int32     `json:"plan"`
	CreatedAt time.Time `json:"created_at"`
	ExpiredAt time.Time `json:"expired_at"`
	AutoRenew bool      `json:"auto_renew"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.Username,
		arg.Fullname,
		arg.Email,
		arg.Plan,
		arg.CreatedAt,
		arg.ExpiredAt,
		arg.AutoRenew,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.AutoRenew,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const getMember = `-- name: GetMember :one
SELECT id, username, fullname, email, plan, created_at, expired_at, auto_renew FROM members WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, id int32) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.AutoRenew,
	)
	return i, err
}

const getMemberByName = `-- name: GetMemberByName :one
SELECT id, username, fullname, email, plan, created_at, expired_at, auto_renew FROM members WHERE username = $1 LIMIT 1
`

func (q *Queries) GetMemberByName(ctx context.Context, username string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByName, username)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.AutoRenew,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, username, fullname, email, plan, created_at, expired_at, auto_renew FROM members
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMembersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Fullname,
			&i.Email,
			&i.Plan,
			&i.CreatedAt,
			&i.ExpiredAt,
			&i.AutoRenew,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE members SET
  username = coalesce($1, username),
  fullname = coalesce($2, fullname),
  email = coalesce($3, email),
  plan = coalesce($4, plan),
  expired_at = coalesce($5, expired_at),
  auto_renew = coalesce($6, auto_renew)
WHERE id = $7
RETURNING id, username, fullname, email, plan, created_at, expired_at, auto_renew
`

type UpdateMemberParams struct {
	Username  sql.NullString `json:"username"`
	Fullname  sql.NullString `json:"fullname"`
	Email     sql.NullString `json:"email"`
	Plan      sql.NullInt32  `json:"plan"`
	ExpiredAt sql.NullTime   `json:"expired_at"`
	AutoRenew sql.NullBool   `json:"auto_renew"`
	ID        int32          `json:"id"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.Username,
		arg.Fullname,
		arg.Email,
		arg.Plan,
		arg.ExpiredAt,
		arg.AutoRenew,
		arg.ID,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.AutoRenew,
	)
	return i, err
}
