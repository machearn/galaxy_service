// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entry.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  member_id, item_id, quantity, total, created_at
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, member_id, item_id, quantity, total, created_at
`

type CreateEntryParams struct {
	MemberID  int32     `json:"member_id"`
	ItemID    int32     `json:"item_id"`
	Quantity  int32     `json:"quantity"`
	Total     int32     `json:"total"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.MemberID,
		arg.ItemID,
		arg.Quantity,
		arg.Total,
		arg.CreatedAt,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ItemID,
		&i.Quantity,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, member_id, item_id, quantity, total, created_at FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ItemID,
		&i.Quantity,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, member_id, item_id, quantity, total, created_at FROM entries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.ItemID,
			&i.Quantity,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByItem = `-- name: ListEntriesByItem :many
SELECT id, member_id, item_id, quantity, total, created_at FROM entries
WHERE item_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntriesByItemParams struct {
	ItemID int32 `json:"item_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntriesByItem(ctx context.Context, arg ListEntriesByItemParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByItem, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.ItemID,
			&i.Quantity,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByMember = `-- name: ListEntriesByMember :many
SELECT id, member_id, item_id, quantity, total, created_at FROM entries
WHERE member_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntriesByMemberParams struct {
	MemberID int32 `json:"member_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListEntriesByMember(ctx context.Context, arg ListEntriesByMemberParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByMember, arg.MemberID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.ItemID,
			&i.Quantity,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries SET
  member_id = coalesce($1, member_id),
  item_id = coalesce($2, item_id),
  quantity = coalesce($3, quantity),
  total = coalesce($4, total),
  created_at = coalesce($5, created_at)
WHERE id = $6
RETURNING id, member_id, item_id, quantity, total, created_at
`

type UpdateEntryParams struct {
	MemberID  sql.NullInt32 `json:"member_id"`
	ItemID    sql.NullInt32 `json:"item_id"`
	Quantity  sql.NullInt32 `json:"quantity"`
	Total     sql.NullInt32 `json:"total"`
	CreatedAt sql.NullTime  `json:"created_at"`
	ID        int32         `json:"id"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry,
		arg.MemberID,
		arg.ItemID,
		arg.Quantity,
		arg.Total,
		arg.CreatedAt,
		arg.ID,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ItemID,
		&i.Quantity,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}
